<?xml version="1.0" encoding="UTF-8"?>
<definitions xmlns="https://www.omg.org/spec/DMN/20191111/MODEL/" xmlns:dmndi="https://www.omg.org/spec/DMN/20191111/DMNDI/" xmlns:dc="http://www.omg.org/spec/DMN/20180521/DC/" xmlns:di="http://www.omg.org/spec/DMN/20180521/DI/" id="definitions_1" name="definitions" namespace="http://camunda.org/schema/1.0/dmn" exporter="dmn-js (https://demo.bpmn.io/dmn)" exporterVersion="17.2.0">
  <inputData id="InputData_val" name="val" />
  <inputData id="InputData_d" name="d" />
  <inputData id="InputData_base" name="base" />
  <decision id="Decision_toString" name="toString(Object val)">
    <informationRequirement id="InformationRequirement_toString_val">
      <requiredInput href="#InputData_val" />
    </informationRequirement>
    <decisionTable id="DecisionTable_toString">
      <input id="InputClause_val" label="val">
        <inputExpression id="LiteralExpression_val" typeRef="number" />
      </input>
      <output id="OutputClause_toString" label="toString(Object val)" typeRef="string" />
      <rule id="DecisionRule_null">
        <inputEntry id="UnaryTests_null">
          <text>val == null</text>
        </inputEntry>
        <outputEntry id="LiteralExpression_null">
          <text>return "null";</text>
        </outputEntry>
      </rule>
      <rule id="DecisionRule_undefined">
        <inputEntry id="UnaryTests_undefined">
          <text>val == Undefined.instance</text>
        </inputEntry>
        <outputEntry id="LiteralExpression_undefined">
          <text>return "undefined";</text>
        </outputEntry>
      </rule>
      <rule id="DecisionRule_string">
        <inputEntry id="UnaryTests_string">
          <text>val instanceof String</text>
        </inputEntry>
        <outputEntry id="LiteralExpression_string">
          <text>return (String)val;</text>
        </outputEntry>
      </rule>
      <rule id="DecisionRule_number">
        <inputEntry id="UnaryTests_number">
          <text>val instanceof Number</text>
        </inputEntry>
        <outputEntry id="LiteralExpression_number">
          <text>return numberToString(((Number)val).doubleValue(), 10);</text>
        </outputEntry>
      </rule>
      <rule id="DecisionRule_scriptable">
        <inputEntry id="UnaryTests_scriptable">
          <text>val instanceof Scriptable</text>
        </inputEntry>
        <outputEntry id="LiteralExpression_scriptable">
          <text>throw errorWithClassName("msg.primitive.expected", val);</text>
        </outputEntry>
      </rule>
      <rule id="DecisionRule_default">
        <inputEntry id="UnaryTests_default">
          <text>-</text>
        </inputEntry>
        <outputEntry id="LiteralExpression_default">
          <text>return val.toString();</text>
        </outputEntry>
      </rule>
    </decisionTable>
  </decision>
  <decision id="Decision_numberToString" name="numberToString(double d, int base)">
    <informationRequirement id="InformationRequirement_numberToString_toString">
      <requiredInput href="#Decision_toString" />
    </informationRequirement>
    <informationRequirement id="InformationRequirement_numberToString_d">
      <requiredInput href="#InputData_d" />
    </informationRequirement>
    <informationRequirement id="InformationRequirement_numberToString_base">
      <requiredInput href="#InputData_base" />
    </informationRequirement>
    <decisionTable id="DecisionTable_numberToString">
      <input id="InputClause_toString" label="toString(Object val)">
        <inputExpression id="LiteralExpression_toString" typeRef="string" />
      </input>
      <input id="InputClause_d" label="d">
        <inputExpression id="LiteralExpression_d" typeRef="boolean" />
      </input>
      <input id="InputClause_base" label="base">
        <inputExpression id="LiteralExpression_base" typeRef="boolean" />
      </input>
      <output id="OutputClause_numberToString" label="numberToString(double d, int base)" typeRef="string" />
      <rule id="DecisionRule_nan">
        <inputEntry id="UnaryTests_toString_nan">
          <text>return numberToString(((Number)val).doubleValue(), 10);</text>
        </inputEntry>
        <inputEntry id="UnaryTests_d_nan">
          <text>d != d</text>
        </inputEntry>
        <inputEntry id="UnaryTests_base_nan">
          <text>-</text>
        </inputEntry>
        <outputEntry id="LiteralExpression_nan">
          <text>return "NaN";</text>
        </outputEntry>
      </rule>
      <rule id="DecisionRule_posinf">
        <inputEntry id="UnaryTests_toString_posinf">
          <text>return numberToString(((Number)val).doubleValue(), 10);</text>
        </inputEntry>
        <inputEntry id="UnaryTests_d_posinf">
          <text>d == Double.POSITIVE_INFINITY</text>
        </inputEntry>
        <inputEntry id="UnaryTests_base_posinf">
          <text>-</text>
        </inputEntry>
        <outputEntry id="LiteralExpression_posinf">
          <text>return "Infinity";</text>
        </outputEntry>
      </rule>
      <rule id="DecisionRule_neginf">
        <inputEntry id="UnaryTests_toString_neginf">
          <text>return numberToString(((Number)val).doubleValue(), 10);</text>
        </inputEntry>
        <inputEntry id="UnaryTests_d_neginf">
          <text>d == Double.NEGATIVE_INFINITY</text>
        </inputEntry>
        <inputEntry id="UnaryTests_base_neginf">
          <text>-</text>
        </inputEntry>
        <outputEntry id="LiteralExpression_neginf">
          <text>return "-Infinity";</text>
        </outputEntry>
      </rule>
      <rule id="DecisionRule_zero">
        <inputEntry id="UnaryTests_toString_zero">
          <text>return numberToString(((Number)val).doubleValue(), 10);</text>
        </inputEntry>
        <inputEntry id="UnaryTests_d_zero">
          <text>d == 0.0</text>
        </inputEntry>
        <inputEntry id="UnaryTests_base_zero">
          <text>-</text>
        </inputEntry>
        <outputEntry id="LiteralExpression_zero">
          <text>return "0";</text>
        </outputEntry>
      </rule>
      <rule id="DecisionRule_bad_radix">
        <inputEntry id="UnaryTests_toString_bad_radix">
          <text>return numberToString(((Number)val).doubleValue(), 10);</text>
        </inputEntry>
        <inputEntry id="UnaryTests_d_bad_radix">
          <text>d == d &amp;&amp; d != Double.POSITIVE_INFINITY &amp;&amp; d != Double.NEGATIVE_INFINITY &amp;&amp; d != 0.0</text>
        </inputEntry>
        <inputEntry id="UnaryTests_base_bad_radix">
          <text>(base &lt; 2) || (base &gt; 36)</text>
        </inputEntry>
        <outputEntry id="LiteralExpression_bad_radix">
          <text>throw Context.reportRuntimeError1("msg.bad.radix", Integer.toString(base));</text>
        </outputEntry>
      </rule>
      <rule id="DecisionRule_base_not_10">
        <inputEntry id="UnaryTests_toString_base_not_10">
          <text>return numberToString(((Number)val).doubleValue(), 10);</text>
        </inputEntry>
        <inputEntry id="UnaryTests_d_base_not_10">
          <text>d == d &amp;&amp; d != Double.POSITIVE_INFINITY &amp;&amp; d != Double.NEGATIVE_INFINITY &amp;&amp; d != 0.0</text>
        </inputEntry>
        <inputEntry id="UnaryTests_base_not_10">
          <text>base != 10</text>
        </inputEntry>
        <outputEntry id="LiteralExpression_base_not_10">
          <text>return DToA.JS_dtobasestr(base, d);</text>
        </outputEntry>
      </rule>
      <rule id="DecisionRule_base_10">
        <inputEntry id="UnaryTests_toString_base_10">
          <text>return numberToString(((Number)val).doubleValue(), 10);</text>
        </inputEntry>
        <inputEntry id="UnaryTests_d_base_10">
          <text>d == d &amp;&amp; d != Double.POSITIVE_INFINITY &amp;&amp; d != Double.NEGATIVE_INFINITY &amp;&amp; d != 0.0</text>
        </inputEntry>
        <inputEntry id="UnaryTests_base_10">
          <text>(base &gt;= 2 &amp;&amp; base &lt;= 36) &amp;&amp; base == 10</text>
        </inputEntry>
        <outputEntry id="LiteralExpression_base_10">
          <text>return result.toString();</text>
        </outputEntry>
      </rule>
    </decisionTable>
  </decision>
  <dmndi:DMNDI>
    <dmndi:DMNDiagram id="DMNDiagram_1">
      <dmndi:DMNShape id="DMNShape_InputData_val" dmnElementRef="InputData_val">
        <dc:Bounds height="45" width="125" x="100" y="300" />
      </dmndi:DMNShape>
      <dmndi:DMNShape id="DMNShape_InputData_d" dmnElementRef="InputData_d">
        <dc:Bounds height="45" width="125" x="300" y="300" />
      </dmndi:DMNShape>
      <dmndi:DMNShape id="DMNShape_InputData_base" dmnElementRef="InputData_base">
        <dc:Bounds height="45" width="125" x="500" y="300" />
      </dmndi:DMNShape>
      <dmndi:DMNShape id="DMNShape_Decision_toString" dmnElementRef="Decision_toString">
        <dc:Bounds height="80" width="180" x="100" y="150" />
      </dmndi:DMNShape>
      <dmndi:DMNShape id="DMNShape_Decision_numberToString" dmnElementRef="Decision_numberToString">
        <dc:Bounds height="80" width="180" x="350" y="50" />
      </dmndi:DMNShape>
      <dmndi:DMNEdge id="DMNEdge_toString_val" dmnElementRef="InformationRequirement_toString_val">
        <di:waypoint x="162" y="300" />
        <di:waypoint x="162" y="230" />
      </dmndi:DMNEdge>
      <dmndi:DMNEdge id="DMNEdge_numberToString_toString" dmnElementRef="InformationRequirement_numberToString_toString">
        <di:waypoint x="190" y="190" />
        <di:waypoint x="350" y="90" />
      </dmndi:DMNEdge>
      <dmndi:DMNEdge id="DMNEdge_numberToString_d" dmnElementRef="InformationRequirement_numberToString_d">
        <di:waypoint x="362" y="300" />
        <di:waypoint x="440" y="130" />
      </dmndi:DMNEdge>
      <dmndi:DMNEdge id="DMNEdge_numberToString_base" dmnElementRef="InformationRequirement_numberToString_base">
        <di:waypoint x="562" y="300" />
        <di:waypoint x="530" y="130" />
      </dmndi:DMNEdge>
    </dmndi:DMNDiagram>
  </dmndi:DMNDI>
</definitions>
