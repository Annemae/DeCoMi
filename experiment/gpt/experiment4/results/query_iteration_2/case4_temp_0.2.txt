Q: We will ask you two questions on Decision Model and Notation. Each question starts with "Q:", and each response should start with "A:" followed by your answer. Only provide an answer to the question which has not been answered yet. Respond using only regular sentences, unless specified otherwise. Do you know Decision Model and Notation and can you create a DMN XML? 

A: Yes, I am familiar with Decision Model and Notation (DMN), which is a standard for modeling and executing decisions that are determined by business rules. I can also create DMN XML files that represent decision models according to the DMN specification. Please proceed with your questions.

Q: 
Consider the following examples (3 examples):

Input: 
Decision Logic Level:
{
    "Conditions" : {
        "iterator" : {
            "Type" : "boolean"
        }
    },
    "Conclusions" : {
        "getNext(Iterator<? extends T> iterator, @Nullable T defaultValue)" : {
            "Type" : "string"
        }
    },
    "DecisionRules" : [
        {
            "iterator" : "iterator.hasNext()",
            "getNext(Iterator<? extends T> iterator, @Nullable T defaultValue)" : "iterator.next()"
        },
        {
            "iterator" : "!(iterator.hasNext())",
            "getNext(Iterator<? extends T> iterator, @Nullable T defaultValue)" : "defaultValue"
        }
    ]
}

Decision Requirement Level:
{
    "Decisions" : {
        "getNext(Iterator<? extends T> iterator, @Nullable T defaultValue)" : {
            "Input" : ["iterator"]
        }
    },
    "InputData" : ["iterator"]
}

Expected JSON output: 
<?xml version="1.0" encoding="UTF-8"?>
<definitions xmlns="https://www.omg.org/spec/DMN/20191111/MODEL/" xmlns:dmndi="https://www.omg.org/spec/DMN/20191111/DMNDI/" xmlns:dc="http://www.omg.org/spec/DMN/20180521/DC/" xmlns:di="http://www.omg.org/spec/DMN/20180521/DI/" id="definitions_08em653" name="definitions" namespace="http://camunda.org/schema/1.0/dmn" exporter="dmn-js (https://demo.bpmn.io/dmn)" exporterVersion="17.2.0">
  <inputData id="InputData_05mgc6n" name="iterator" />
  <decision id="Decision_1pocaxa" name="getNext(Iterator&#60;? extends T&#62; iterator, @Nullable T defaultValue)">
    <informationRequirement id="InformationRequirement_1g2xc78">
      <requiredInput href="#InputData_05mgc6n" />
    </informationRequirement>
    <decisionTable id="DecisionTable_0izbi3j">
      <input id="InputClause_1s1rlxb" label="iterator">
        <inputExpression id="LiteralExpression_0mwc8gu" typeRef="boolean" />
      </input>
      <output id="OutputClause_0h2gn4j" label="getNext(Iterator&#60;? extends T&#62; iterator, @Nullable T defaultValue)" typeRef="string" />
      <rule id="DecisionRule_1b22qw5">
        <inputEntry id="UnaryTests_1128jj0">
          <text>iterator.hasNext()</text>
        </inputEntry>
        <outputEntry id="LiteralExpression_14bqw98">
          <text>iterator.next()</text>
        </outputEntry>
      </rule>
      <rule id="DecisionRule_0rzdr3u">
        <inputEntry id="UnaryTests_1qgxg8r">
          <text>!(iterator.hasNext())</text>
        </inputEntry>
        <outputEntry id="LiteralExpression_1c0zqqe">
          <text>defaultValue</text>
        </outputEntry>
      </rule>
    </decisionTable>
  </decision>
  <dmndi:DMNDI>
    <dmndi:DMNDiagram id="DMNDiagram_088hwua">
      <dmndi:DMNShape id="DMNShape_0vq1aiw" dmnElementRef="InputData_05mgc6n">
        <dc:Bounds height="45" width="125" x="177" y="258" />
      </dmndi:DMNShape>
      <dmndi:DMNEdge id="DMNEdge_06c9zcq" dmnElementRef="InformationRequirement_1g2xc78">
        <di:waypoint x="240" y="258" />
        <di:waypoint x="240" y="220" />
        <di:waypoint x="240" y="200" />
      </dmndi:DMNEdge>
      <dmndi:DMNShape id="DMNShape_11s6k8p" dmnElementRef="Decision_1pocaxa">
        <dc:Bounds height="80" width="180" x="150" y="120" />
      </dmndi:DMNShape>
    </dmndi:DMNDiagram>
  </dmndi:DMNDI>
</definitions>


Input: 
Decision Logic Level:
{
    "Conditions" : {
        "start, end" : {
            "Type" : "boolean"
        }
    },
    "Conclusions" : {
        "checkInterval(long start, long end)" : {
            "Type" : "string"
        }
    },
    "DecisionRules" : [
        {
            "start, end" : "end < start",
            "checkInterval(long start, long end)" : "throw new IllegalArgumentException("The end instant must be greater than the start instant");"
        },
        {
            "start, end" : "end >= start",
            "checkInterval(long start, long end)" : null
        }
    ]
}

Decision Requirement Level:
{
    "Decisions" : {
        "checkInterval(long start, long end)" : {
            "Input" : ["start, end"]
        }
    },
    "InputData" : ["start, end"]
}

Expected JSON output: 
<?xml version="1.0" encoding="UTF-8"?>
<definitions xmlns="https://www.omg.org/spec/DMN/20191111/MODEL/" xmlns:dmndi="https://www.omg.org/spec/DMN/20191111/DMNDI/" xmlns:dc="http://www.omg.org/spec/DMN/20180521/DC/" xmlns:di="http://www.omg.org/spec/DMN/20180521/DI/" id="definitions_00gpcft" name="definitions" namespace="http://camunda.org/schema/1.0/dmn" exporter="dmn-js (https://demo.bpmn.io/dmn)" exporterVersion="17.2.0">
  <decision id="decision_0iygfo0" name="checkInterval(long start, long end)">
    <informationRequirement id="InformationRequirement_0hhzr6i">
      <requiredInput href="#InputData_0enwjwx" />
    </informationRequirement>
    <decisionTable id="decisionTable_0n05uj7">
      <input id="input1" label="start, end">
        <inputExpression id="inputExpression1" typeRef="boolean">
          <text></text>
        </inputExpression>
      </input>
      <output id="output1" label="checkInterval(long start, long end)" name="" typeRef="string" />
      <rule id="DecisionRule_00anz39">
        <inputEntry id="UnaryTests_1iqx1ms">
          <text>end &lt; start</text>
        </inputEntry>
        <outputEntry id="LiteralExpression_0ji4wn3">
          <text>throw new IllegalArgumentException("The end instant must be greater than the start instant");</text>
        </outputEntry>
      </rule>
      <rule id="DecisionRule_0zq27lu">
        <inputEntry id="UnaryTests_09is226">
          <text>end &gt;= start</text>
        </inputEntry>
        <outputEntry id="LiteralExpression_0559wuy">
          <text>null</text>
        </outputEntry>
      </rule>
    </decisionTable>
  </decision>
  <inputData id="InputData_0enwjwx" name="start, end" />
  <dmndi:DMNDI>
    <dmndi:DMNDiagram id="DMNDiagram_0e8pnjw">
      <dmndi:DMNShape id="DMNShape_0ytr1p2" dmnElementRef="decision_0iygfo0">
        <dc:Bounds height="80" width="180" x="160" y="110" />
      </dmndi:DMNShape>
      <dmndi:DMNShape id="DMNShape_0nqt3kg" dmnElementRef="InputData_0enwjwx">
        <dc:Bounds height="45" width="125" x="187" y="237" />
      </dmndi:DMNShape>
      <dmndi:DMNEdge id="DMNEdge_1srdu7x" dmnElementRef="InformationRequirement_0hhzr6i">
        <di:waypoint x="250" y="237" />
        <di:waypoint x="250" y="210" />
        <di:waypoint x="250" y="190" />
      </dmndi:DMNEdge>
    </dmndi:DMNDiagram>
  </dmndi:DMNDI>
</definitions>


Input: 
Decision Logic Level:
{
    "Conditions" : {
        "port" : {
            "Type" : "boolean"
        },
        "name" : {
            "Type" : "string"
        }
    },
    "Conclusions" : {
        "resolve(final HttpHost host)" : {
            "Type" : "string"
        }
    },
    "DecisionRules" : [
        {
            "port" : "port > 0",
            "name" : "-",
            "resolve(final HttpHost host)" : "return port;"
        },
        {
            "port" : "port <= 0",
            "name" : "name.equalsIgnoreCase("http")",
            "resolve(final HttpHost host)" : "return 80;"
        },
        {
            "port" : "port <= 0",
            "name" : "name.equalsIgnoreCase("https")",
            "resolve(final HttpHost host)" : "return 443;"
        },
        {
            "port" : "port <= 0",
            "name" : "!(name.equalsIgnoreCase("http")) && !(name.equalsIgnoreCase("https"))",
            "resolve(final HttpHost host)" : "throw new UnsupportedSchemeException(name + " protocol is not supported");"
        }
    ]
}

Decision Requirement Level:
{
    "Decisions" : {
        "resolve(final HttpHost host)" : {
            "Input" : ["port", "name"]
        }
    },
    "InputData" : ["port", "name"]
}

Expected JSON output: 
<?xml version="1.0" encoding="UTF-8"?>
<definitions xmlns="https://www.omg.org/spec/DMN/20191111/MODEL/" xmlns:dmndi="https://www.omg.org/spec/DMN/20191111/DMNDI/" xmlns:dc="http://www.omg.org/spec/DMN/20180521/DC/" xmlns:di="http://www.omg.org/spec/DMN/20180521/DI/" id="definitions_1khyx15" name="definitions" namespace="http://camunda.org/schema/1.0/dmn" exporter="dmn-js (https://demo.bpmn.io/dmn)" exporterVersion="17.2.0">
  <decision id="decision_08mi2kh" name="resolve(final HttpHost host)">
    <informationRequirement id="InformationRequirement_11zq33g">
      <requiredInput href="#InputData_1yd1o35" />
    </informationRequirement>
    <informationRequirement id="InformationRequirement_10edaps">
      <requiredInput href="#InputData_1gapmsp" />
    </informationRequirement>
    <decisionTable id="decisionTable_0fn2rr7">
      <input id="InputClause_1m3q0rl" label="port">
        <inputExpression id="LiteralExpression_1mibefk" typeRef="boolean">
          <text></text>
        </inputExpression>
      </input>
      <input id="input1" label="name">
        <inputExpression id="inputExpression1" typeRef="string">
          <text></text>
        </inputExpression>
      </input>
      <output id="output1" label="resolve(final HttpHost host)" name="" typeRef="string" />
      <rule id="DecisionRule_152edol">
        <inputEntry id="UnaryTests_1n1yrsc">
          <text>port &gt; 0</text>
        </inputEntry>
        <inputEntry id="UnaryTests_0k0wvh4">
          <text>-</text>
        </inputEntry>
        <outputEntry id="LiteralExpression_1rssu1i">
          <text>return port;</text>
        </outputEntry>
      </rule>
      <rule id="DecisionRule_1kluoj5">
        <inputEntry id="UnaryTests_11n73o7">
          <text>port &lt;= 0</text>
        </inputEntry>
        <inputEntry id="UnaryTests_0mtb96b">
          <text>name.equalsIgnoreCase("http")</text>
        </inputEntry>
        <outputEntry id="LiteralExpression_10proya">
          <text>return 80;</text>
        </outputEntry>
      </rule>
      <rule id="DecisionRule_01m4cqv">
        <inputEntry id="UnaryTests_0yqqqf1">
          <text>port &lt;= 0</text>
        </inputEntry>
        <inputEntry id="UnaryTests_0dleyfy">
          <text>name.equalsIgnoreCase("https")</text>
        </inputEntry>
        <outputEntry id="LiteralExpression_09hc5el">
          <text>return 443;</text>
        </outputEntry>
      </rule>
      <rule id="DecisionRule_0zxf3ra">
        <inputEntry id="UnaryTests_0n5agrw">
          <text>port &lt;= 0</text>
        </inputEntry>
        <inputEntry id="UnaryTests_1j6q8qw">
          <text>!(name.equalsIgnoreCase("http")) &amp;&amp; !(name.equalsIgnoreCase("https"))</text>
        </inputEntry>
        <outputEntry id="LiteralExpression_0nhkia1">
          <text>throw new UnsupportedSchemeException(name + " protocol is not supported");</text>
        </outputEntry>
      </rule>
    </decisionTable>
  </decision>
  <inputData id="InputData_1yd1o35" name="port" />
  <inputData id="InputData_1gapmsp" name="name" />
  <dmndi:DMNDI>
    <dmndi:DMNDiagram id="DMNDiagram_0l8iwsm">
      <dmndi:DMNShape id="DMNShape_1djzll4" dmnElementRef="decision_08mi2kh">
        <dc:Bounds height="80" width="180" x="220" y="80" />
      </dmndi:DMNShape>
      <dmndi:DMNShape id="DMNShape_1mjduok" dmnElementRef="InputData_1yd1o35">
        <dc:Bounds height="45" width="125" x="157" y="218" />
      </dmndi:DMNShape>
      <dmndi:DMNEdge id="DMNEdge_0pi63kv" dmnElementRef="InformationRequirement_11zq33g">
        <di:waypoint x="220" y="218" />
        <di:waypoint x="280" y="180" />
        <di:waypoint x="280" y="160" />
      </dmndi:DMNEdge>
      <dmndi:DMNShape id="DMNShape_0q08g0q" dmnElementRef="InputData_1gapmsp">
        <dc:Bounds height="45" width="125" x="338" y="219" />
      </dmndi:DMNShape>
      <dmndi:DMNEdge id="DMNEdge_1yb2q7y" dmnElementRef="InformationRequirement_10edaps">
        <di:waypoint x="401" y="219" />
        <di:waypoint x="340" y="180" />
        <di:waypoint x="340" y="160" />
      </dmndi:DMNEdge>
    </dmndi:DMNDiagram>
  </dmndi:DMNDI>
</definitions>


Could you generate a DMN XML file based on the following JSON objects?

Inconsistencies in naming and relationships between these JSON objects must be resolved to produce a valid DMN XML representation. Please note that these inconsistencies are not present in the examples because the examples focus on showing how the JSON objects are translated to DMN XML.
Follow the rules below to address these inconsistencies by addressing them in the final DMN XML file. To help resolve the inconsistencies, the corresponding Java source code (marked CORRESPONDING CODE) is provided for reference. Refer to this code where necessary to ensure alignment.

1) There are some naming inconsistencies between the `Decision Requirement Level` and `Decision Logic Level` JSON objects, i.e., different names are sometimes used for the same DMN element. Ensure that the DMN XML uses consistent naming at both levels when the same DMN element appears under different names. When choosing between conflicting names, use the one that best aligns with the Java source code. For example, do not use made-up names or names that include field/property accesses (e.g., use user, not user.name).
2) Sometimes multiple (different) names are used for the same DMN element across the `Decision Logic Level` and/or `Decision Requirement Level` JSON objects. In such cases, combine these into a single, consistently named DMN element within the DMN XML that best aligns with the Java source code. Again, please note that the selected name must be used consistently across both levels in the resulting DMN XML.
3) In the `Decision Requirement Level` JSON object, some decisions (i.e., functions) are used as inputs to other decisions. In each such case, ensure that the corresponding decision tables in the `Decision Logic Level` include input columns for these input decisions in the resulting DMN XML.

It is important to note that while DMN elements may be renamed or combined for consistency, no original DMN element or its underlying logic should be lost in the transformation process.

Only provide the DMN XML.
Do not write anything else.

Analyze the following JSON objects (marked as DMN JSON OBJECTS) and corresponding Java source code (marked as CORRESPONDING CODE):

DMN JSON OBJECTS:

Decision Logic Level:
{
    "Conditions": {
        "isValNull": {
            "Type": "boolean"
        },
        "isValUndefined": {
            "Type": "boolean"
        },
        "isValString": {
            "Type": "boolean"
        },
        "isValNumber": {
            "Type": "boolean"
        },
        "isValInitiallyScriptable": {
            "Type": "boolean"
        },
        "isValAfterDefaultScriptable": {
            "Type": "boolean"
        }
    },
    "Conclusions": {
        "toString(Object val)": {
            "Type": "string"
        }
    },
    "DecisionRules": [
        {
            "isValNull": "val == null",
            "isValUndefined": "-",
            "isValString": "-",
            "isValNumber": "-",
            "isValInitiallyScriptable": "-",
            "isValAfterDefaultScriptable": "-",
            "toString(Object val)": "return "null";"
        },
        {
            "isValNull": "!(val == null)",
            "isValUndefined": "val == Undefined.instance",
            "isValString": "-",
            "isValNumber": "-",
            "isValInitiallyScriptable": "-",
            "isValAfterDefaultScriptable": "-",
            "toString(Object val)": "return "undefined";"
        },
        {
            "isValNull": "!(val == null)",
            "isValUndefined": "!(val == Undefined.instance)",
            "isValString": "val instanceof String",
            "isValNumber": "-",
            "isValInitiallyScriptable": "-",
            "isValAfterDefaultScriptable": "-",
            "toString(Object val)": "return (String)val;"
        },
        {
            "isValNull": "!(val == null)",
            "isValUndefined": "!(val == Undefined.instance)",
            "isValString": "!(val instanceof String)",
            "isValNumber": "val instanceof Number",
            "isValInitiallyScriptable": "-",
            "isValAfterDefaultScriptable": "-",
            "toString(Object val)": "return numberToString(((Number)val).doubleValue(), 10);"
        },
        {
            "isValNull": "!(val == null)",
            "isValUndefined": "!(val == Undefined.instance)",
            "isValString": "!(val instanceof String)",
            "isValNumber": "!(val instanceof Number)",
            "isValInitiallyScriptable": "val instanceof Scriptable",
            "isValAfterDefaultScriptable": "val instanceof Scriptable",
            "toString(Object val)": "throw errorWithClassName("msg.primitive.expected", val);"
        },
        {
            "isValNull": "!(val == null)",
            "isValUndefined": "!(val == Undefined.instance)",
            "isValString": "!(val instanceof String)",
            "isValNumber": "!(val instanceof Number)",
            "isValInitiallyScriptable": "!(val instanceof Scriptable)",
            "isValAfterDefaultScriptable": "-",
            "toString(Object val)": "return val.toString();"
        }
    ]
}

{
    "Conditions" : {
        "d" : {
            "Type" : "boolean"
        },
        "base" : {
            "Type" : "boolean"
        }
    },
    "Conclusions" : {
        "numberToString(double d, int base)" : {
            "Type" : "string"
        }
    },
    "DecisionRules" : [
        {
            "d" : "d != d",
            "base" : "-",
            "numberToString(double d, int base)" : "return "NaN";"
        },
        {
            "d" : "d == Double.POSITIVE_INFINITY",
            "base" : "-",
            "numberToString(double d, int base)" : "return "Infinity";"
        },
        {
            "d" : "d == Double.NEGATIVE_INFINITY",
            "base" : "-",
            "numberToString(double d, int base)" : "return "-Infinity";"
        },
        {
            "d" : "d == 0.0",
            "base" : "-",
            "numberToString(double d, int base)" : "return "0";"
        },
        {
            "d" : "d == d && d != Double.POSITIVE_INFINITY && d != Double.NEGATIVE_INFINITY && d != 0.0",
            "base" : "(base < 2) || (base > 36)",
            "numberToString(double d, int base)" : "throw Context.reportRuntimeError1("msg.bad.radix", Integer.toString(base));"
        },
        {
            "d" : "d == d && d != Double.POSITIVE_INFINITY && d != Double.NEGATIVE_INFINITY && d != 0.0",
            "base" : "base != 10",
            "numberToString(double d, int base)" : "return DToA.JS_dtobasestr(base, d);"
        },
        {
            "d" : "d == d && d != Double.POSITIVE_INFINITY && d != Double.NEGATIVE_INFINITY && d != 0.0",
            "base" : "(base >= 2 && base <= 36) && base == 10",
            "numberToString(double d, int base)" : "return result.toString();"
        } 
    ]
}

Decision Requirement Level:
{
    "Decisions" : {
        "toString(Object val)" : {
            "Input" : ["val", "numberToString(double d, int base)"]
        },
        "numberToString(double d, int base)" : {
            "Input" : ["d", "base"]
        }
    },
    "InputData" : ["val", "d", "base"]
}


CORRESPONDING CODE:

public static String toString(Object val) {
    for (;;) {
        if (val == null) {
            return "null";
        }
        if (val == Undefined.instance) {
            return "undefined";
        }
        if (val instanceof String) {
            return (String)val;
        }
        if (val instanceof Number) {
            // XXX should we just teach NativeNumber.stringValue()
            // about Numbers?
            return numberToString(((Number)val).doubleValue(), 10);
        }
        if (val instanceof Scriptable) {
            val = ((Scriptable) val).getDefaultValue(StringClass);
            if (val instanceof Scriptable) {
                throw errorWithClassName("msg.primitive.expected", val);
            }
            continue;
        }
        return val.toString();
    }
}

public static String numberToString(double d, int base) {
    if (d != d)
        return "NaN";
    if (d == Double.POSITIVE_INFINITY)
        return "Infinity";
    if (d == Double.NEGATIVE_INFINITY)
        return "-Infinity";
    if (d == 0.0)
        return "0";

    if ((base < 2) || (base > 36)) {
        throw Context.reportRuntimeError1(
            "msg.bad.radix", Integer.toString(base));
    }

    if (base != 10) {
        return DToA.JS_dtobasestr(base, d);
    } else {
        StringBuffer result = new StringBuffer();
        DToA.JS_dtostr(result, DToA.DTOSTR_STANDARD, 0, d);
        return result.toString();
    }

}
 

<?xml version="1.0" encoding="UTF-8"?>
<definitions xmlns="https://www.omg.org/spec/DMN/20191111/MODEL/" xmlns:dmndi="https://www.omg.org/spec/DMN/20191111/DMNDI/" xmlns:dc="http://www.omg.org/spec/DMN/20180521/DC/" xmlns:di="http://www.omg.org/spec/DMN/20180521/DI/" id="definitions_1" name="definitions" namespace="http://camunda.org/schema/1.0/dmn" exporter="dmn-js (https://demo.bpmn.io/dmn)" exporterVersion="17.2.0">
  <inputData id="InputData_val" name="val" />
  <inputData id="InputData_d" name="d" />
  <inputData id="InputData_base" name="base" />
  <decision id="Decision_numberToString" name="numberToString(double d, int base)">
    <informationRequirement id="InformationRequirement_d">
      <requiredInput href="#InputData_d" />
    </informationRequirement>
    <informationRequirement id="InformationRequirement_base">
      <requiredInput href="#InputData_base" />
    </informationRequirement>
    <decisionTable id="DecisionTable_numberToString">
      <input id="InputClause_d" label="d">
        <inputExpression id="LiteralExpression_d" typeRef="boolean" />
      </input>
      <input id="InputClause_base" label="base">
        <inputExpression id="LiteralExpression_base" typeRef="boolean" />
      </input>
      <output id="OutputClause_numberToString" label="numberToString(double d, int base)" typeRef="string" />
      <rule id="DecisionRule_nan">
        <inputEntry id="UnaryTests_d_nan">
          <text>d != d</text>
        </inputEntry>
        <inputEntry id="UnaryTests_base_nan">
          <text>-</text>
        </inputEntry>
        <outputEntry id="LiteralExpression_nan">
          <text>return "NaN";</text>
        </outputEntry>
      </rule>
      <rule id="DecisionRule_posinf">
        <inputEntry id="UnaryTests_d_posinf">
          <text>d == Double.POSITIVE_INFINITY</text>
        </inputEntry>
        <inputEntry id="UnaryTests_base_posinf">
          <text>-</text>
        </inputEntry>
        <outputEntry id="LiteralExpression_posinf">
          <text>return "Infinity";</text>
        </outputEntry>
      </rule>
      <rule id="DecisionRule_neginf">
        <inputEntry id="UnaryTests_d_neginf">
          <text>d == Double.NEGATIVE_INFINITY</text>
        </inputEntry>
        <inputEntry id="UnaryTests_base_neginf">
          <text>-</text>
        </inputEntry>
        <outputEntry id="LiteralExpression_neginf">
          <text>return "-Infinity";</text>
        </outputEntry>
      </rule>
      <rule id="DecisionRule_zero">
        <inputEntry id="UnaryTests_d_zero">
          <text>d == 0.0</text>
        </inputEntry>
        <inputEntry id="UnaryTests_base_zero">
          <text>-</text>
        </inputEntry>
        <outputEntry id="LiteralExpression_zero">
          <text>return "0";</text>
        </outputEntry>
      </rule>
      <rule id="DecisionRule_badRadix">
        <inputEntry id="UnaryTests_d_badRadix">
          <text>d == d &amp;&amp; d != Double.POSITIVE_INFINITY &amp;&amp; d != Double.NEGATIVE_INFINITY &amp;&amp; d != 0.0</text>
        </inputEntry>
        <inputEntry id="UnaryTests_base_badRadix">
          <text>(base &lt; 2) || (base &gt; 36)</text>
        </inputEntry>
        <outputEntry id="LiteralExpression_badRadix">
          <text>throw Context.reportRuntimeError1("msg.bad.radix", Integer.toString(base));</text>
        </outputEntry>
      </rule>
      <rule id="DecisionRule_baseNot10">
        <inputEntry id="UnaryTests_d_baseNot10">
          <text>d == d &amp;&amp; d != Double.POSITIVE_INFINITY &amp;&amp; d != Double.NEGATIVE_INFINITY &amp;&amp; d != 0.0</text>
        </inputEntry>
        <inputEntry id="UnaryTests_baseNot10">
          <text>base != 10</text>
        </inputEntry>
        <outputEntry id="LiteralExpression_baseNot10">
          <text>return DToA.JS_dtobasestr(base, d);</text>
        </outputEntry>
      </rule>
      <rule id="DecisionRule_base10">
        <inputEntry id="UnaryTests_d_base10">
          <text>d == d &amp;&amp; d != Double.POSITIVE_INFINITY &amp;&amp; d != Double.NEGATIVE_INFINITY &amp;&amp; d != 0.0</text>
        </inputEntry>
        <inputEntry id="UnaryTests_base10">
          <text>(base &gt;= 2 &amp;&amp; base &lt;= 36) &amp;&amp; base == 10</text>
        </inputEntry>
        <outputEntry id="LiteralExpression_base10">
          <text>return result.toString();</text>
        </outputEntry>
      </rule>
    </decisionTable>
  </decision>
  <decision id="Decision_toString" name="toString(Object val)">
    <informationRequirement id="InformationRequirement_val">
      <requiredInput href="#InputData_val" />
    </informationRequirement>
    <informationRequirement id="InformationRequirement_numberToString">
      <requiredDecision href="#Decision_numberToString" />
    </informationRequirement>
    <decisionTable id="DecisionTable_toString">
      <input id="InputClause_isValNull" label="isValNull">
        <inputExpression id="LiteralExpression_isValNull" typeRef="boolean" />
      </input>
      <input id="InputClause_isValUndefined" label="isValUndefined">
        <inputExpression id="LiteralExpression_isValUndefined" typeRef="boolean" />
      </input>
      <input id="InputClause_isValString" label="isValString">
        <inputExpression id="LiteralExpression_isValString" typeRef="boolean" />
      </input>
      <input id="InputClause_isValNumber" label="isValNumber">
        <inputExpression id="LiteralExpression_isValNumber" typeRef="boolean" />
      </input>
      <input id="InputClause_isValInitiallyScriptable" label="isValInitiallyScriptable">
        <inputExpression id="LiteralExpression_isValInitiallyScriptable" typeRef="boolean" />
      </input>
      <input id="InputClause_isValAfterDefaultScriptable" label="isValAfterDefaultScriptable">
        <inputExpression id="LiteralExpression_isValAfterDefaultScriptable" typeRef="boolean" />
      </input>
      <input id="InputClause_numberToString" label="numberToString(double d, int base)">
        <inputExpression id="LiteralExpression_numberToString" typeRef="string" />
      </input>
      <output id="OutputClause_toString" label="toString(Object val)" typeRef="string" />
      <rule id="DecisionRule_null">
        <inputEntry id="UnaryTests_isValNull_null">
          <text>val == null</text>
        </inputEntry>
        <inputEntry id="UnaryTests_isValUndefined_null">
          <text>-</text>
        </inputEntry>
        <inputEntry id="UnaryTests_isValString_null">
          <text>-</text>
        </inputEntry>
        <inputEntry id="UnaryTests_isValNumber_null">
          <text>-</text>
        </inputEntry>
        <inputEntry id="UnaryTests_isValInitiallyScriptable_null">
          <text>-</text>
        </inputEntry>
        <inputEntry id="UnaryTests_isValAfterDefaultScriptable_null">
          <text>-</text>
        </inputEntry>
        <inputEntry id="UnaryTests_numberToString_null">
          <text>-</text>
        </inputEntry>
        <outputEntry id="LiteralExpression_null">
          <text>return "null";</text>
        </outputEntry>
      </rule>
      <rule id="DecisionRule_undefined">
        <inputEntry id="UnaryTests_isValNull_undefined">
          <text>!(val == null)</text>
        </inputEntry>
        <inputEntry id="UnaryTests_isValUndefined_undefined">
          <text>val == Undefined.instance</text>
        </inputEntry>
        <inputEntry id="UnaryTests_isValString_undefined">
          <text>-</text>
        </inputEntry>
        <inputEntry id="UnaryTests_isValNumber_undefined">
          <text>-</text>
        </inputEntry>
        <inputEntry id="UnaryTests_isValInitiallyScriptable_undefined">
          <text>-</text>
        </inputEntry>
        <inputEntry id="UnaryTests_isValAfterDefaultScriptable_undefined">
          <text>-</text>
        </inputEntry>
        <inputEntry id="UnaryTests_numberToString_undefined">
          <text>-</text>
        </inputEntry>
        <outputEntry id="LiteralExpression_undefined">
          <text>return "undefined";</text>
        </outputEntry>
      </rule>
      <rule id="DecisionRule_string">
        <inputEntry id="UnaryTests_isValNull_string">
          <text>!(val == null)</text>
        </inputEntry>
        <inputEntry id="UnaryTests_isValUndefined_string">
          <text>!(val == Undefined.instance)</text>
        </inputEntry>
        <inputEntry id="UnaryTests_isValString_string">
          <text>val instanceof String</text>
        </inputEntry>
        <inputEntry id="UnaryTests_isValNumber_string">
          <text>-</text>
        </inputEntry>
        <inputEntry id="UnaryTests_isValInitiallyScriptable_string">
          <text>-</text>
        </inputEntry>
        <inputEntry id="UnaryTests_isValAfterDefaultScriptable_string">
          <text>-</text>
        </inputEntry>
        <inputEntry id="UnaryTests_numberToString_string">
          <text>-</text>
        </inputEntry>
        <outputEntry id="LiteralExpression_string">
          <text>return (String)val;</text>
        </outputEntry>
      </rule>
      <rule id="DecisionRule_number">
        <inputEntry id="UnaryTests_isValNull_number">
          <text>!(val == null)</text>
        </inputEntry>
        <inputEntry id="UnaryTests_isValUndefined_number">
          <text>!(val == Undefined.instance)</text>
        </inputEntry>
        <inputEntry id="UnaryTests_isValString_number">
          <text>!(val instanceof String)</text>
        </inputEntry>
        <inputEntry id="UnaryTests_isValNumber_number">
          <text>val instanceof Number</text>
        </inputEntry>
        <inputEntry id="UnaryTests_isValInitiallyScriptable_number">
          <text>-</text>
        </inputEntry>
        <inputEntry id="UnaryTests_isValAfterDefaultScriptable_number">
          <text>-</text>
        </inputEntry>
        <inputEntry id="UnaryTests_numberToString_number">
          <text>numberToString(((Number)val).doubleValue(), 10)</text>
        </inputEntry>
        <outputEntry id="LiteralExpression_number">
          <text>return numberToString(((Number)val).doubleValue(), 10);</text>
        </outputEntry>
      </rule>
      <rule id="DecisionRule_scriptable">
        <inputEntry id="UnaryTests_isValNull_scriptable">
          <text>!(val == null)</text>
        </inputEntry>
        <inputEntry id="UnaryTests_isValUndefined_scriptable">
          <text>!(val == Undefined.instance)</text>
        </inputEntry>
        <inputEntry id="UnaryTests_isValString_scriptable">
          <text>!(val instanceof String)</text>
        </inputEntry>
        <inputEntry id="UnaryTests_isValNumber_scriptable">
          <text>!(val instanceof Number)</text>
        </inputEntry>
        <inputEntry id="UnaryTests_isValInitiallyScriptable_scriptable">
          <text>val instanceof Scriptable</text>
        </inputEntry>
        <inputEntry id="UnaryTests_isValAfterDefaultScriptable_scriptable">
          <text>val instanceof Scriptable</text>
        </inputEntry>
        <inputEntry id="UnaryTests_numberToString_scriptable">
          <text>-</text>
        </inputEntry>
        <outputEntry id="LiteralExpression_scriptable">
          <text>throw errorWithClassName("msg.primitive.expected", val);</text>
        </outputEntry>
      </rule>
      <rule id="DecisionRule_toString">
        <inputEntry id="UnaryTests_isValNull_toString">
          <text>!(val == null)</text>
        </inputEntry>
        <inputEntry id="UnaryTests_isValUndefined_toString">
          <text>!(val == Undefined.instance)</text>
        </inputEntry>
        <inputEntry id="UnaryTests_isValString_toString">
          <text>!(val instanceof String)</text>
        </inputEntry>
        <inputEntry id="UnaryTests_isValNumber_toString">
          <text>!(val instanceof Number)</text>
        </inputEntry>
        <inputEntry id="UnaryTests_isValInitiallyScriptable_toString">
          <text>!(val instanceof Scriptable)</text>
        </inputEntry>
        <inputEntry id="UnaryTests_isValAfterDefaultScriptable_toString">
          <text>-</text>
        </inputEntry>
        <inputEntry id="UnaryTests_numberToString_toString">
          <text>-</text>
        </inputEntry>
        <outputEntry id="LiteralExpression_toString">
          <text>return val.toString();</text>
        </outputEntry>
      </rule>
    </decisionTable>
  </decision>
  <dmndi:DMNDI>
    <dmndi:DMNDiagram id="DMNDiagram_1">
      <dmndi:DMNShape id="DMNShape_InputData_val" dmnElementRef="InputData_val">
        <dc:Bounds height="45" width="125" x="100" y="400" />
      </dmndi:DMNShape>
      <dmndi:DMNShape id="DMNShape_InputData_d" dmnElementRef="InputData_d">
        <dc:Bounds height="45" width="125" x="300" y="400" />
      </dmndi:DMNShape>
      <dmndi:DMNShape id="DMNShape_InputData_base" dmnElementRef="InputData_base">
        <dc:Bounds height="45" width="125" x="500" y="400" />
      </dmndi:DMNShape>
      <dmndi:DMNShape id="DMNShape_Decision_numberToString" dmnElementRef="Decision_numberToString">
        <dc:Bounds height="80" width="180" x="400" y="250" />
      </dmndi:DMNShape>
      <dmndi:DMNShape id="DMNShape_Decision_toString" dmnElementRef="Decision_toString">
        <dc:Bounds height="80" width="180" x="200" y="100" />
      </dmndi:DMNShape>
      <dmndi:DMNEdge id="DMNEdge_InputData_d_to_numberToString" dmnElementRef="InformationRequirement_d">
        <di:waypoint x="362" y="400" />
        <di:waypoint x="490" y="330" />
      </dmndi:DMNEdge>
      <dmndi:DMNEdge id="DMNEdge_InputData_base_to_numberToString" dmnElementRef="InformationRequirement_base">
        <di:waypoint x="562" y="400" />
        <di:waypoint x="490" y="330" />
      </dmndi:DMNEdge>
      <dmndi:DMNEdge id="DMNEdge_InputData_val_to_toString" dmnElementRef="InformationRequirement_val">
        <di:waypoint x="162" y="400" />
        <di:waypoint x="290" y="180" />
      </dmndi:DMNEdge>
      <dmndi:DMNEdge id="DMNEdge_numberToString_to_toString" dmnElementRef="InformationRequirement_numberToString">
        <di:waypoint x="490" y="250" />
        <di:waypoint x="290" y="180" />
      </dmndi:DMNEdge>
    </dmndi:DMNDiagram>
  </dmndi:DMNDI>
</definitions>


