<?xml version="1.0" encoding="UTF-8"?>
<definitions xmlns="https://www.omg.org/spec/DMN/20191111/MODEL/" xmlns:dmndi="https://www.omg.org/spec/DMN/20191111/DMNDI/" xmlns:dc="http://www.omg.org/spec/DMN/20180521/DC/" xmlns:di="http://www.omg.org/spec/DMN/20180521/DI/" id="definitions_0" name="definitions" namespace="http://camunda.org/schema/1.0/dmn" exporter="Python DMN Generator" exporterVersion="1.0.0">
  <inputData id="InputData_0" name="val" />
  <inputData id="InputData_1" name="d" />
  <inputData id="InputData_2" name="base" />
  <decision id="Decision_0" name="toString(Object val)">
    <informationRequirement id="InformationRequirement_0">
      <requiredInput href="#InputData_0" />
    </informationRequirement>
    <decisionTable id="DecisionTable_0">
      <input id="InputClause_0" label="val">
        <inputExpression id="LiteralExpression_0" typeRef="number"><text></text></inputExpression>
      </input>
      <output id="OutputClause_0" label="toString(Object val)" typeRef="string" />
      <rule id="DecisionRule_0">
        <inputEntry id="UnaryTests_0"><text>val == null</text></inputEntry>
        <outputEntry id="LiteralExpression_1"><text>return "null";</text></outputEntry>
      </rule>
      <rule id="DecisionRule_1">
        <inputEntry id="UnaryTests_1"><text>val == Undefined.instance</text></inputEntry>
        <outputEntry id="LiteralExpression_2"><text>return "undefined";</text></outputEntry>
      </rule>
      <rule id="DecisionRule_2">
        <inputEntry id="UnaryTests_2"><text>val instanceof String</text></inputEntry>
        <outputEntry id="LiteralExpression_3"><text>return (String)val;</text></outputEntry>
      </rule>
      <rule id="DecisionRule_3">
        <inputEntry id="UnaryTests_3"><text>val instanceof Number</text></inputEntry>
        <outputEntry id="LiteralExpression_4"><text>return numberToString(((Number)val).doubleValue(), 10);</text></outputEntry>
      </rule>
      <rule id="DecisionRule_4">
        <inputEntry id="UnaryTests_4"><text>val instanceof Scriptable</text></inputEntry>
        <outputEntry id="LiteralExpression_5"><text>throw errorWithClassName("msg.primitive.expected", val);</text></outputEntry>
      </rule>
      <rule id="DecisionRule_5">
        <inputEntry id="UnaryTests_5"><text>-</text></inputEntry>
        <outputEntry id="LiteralExpression_6"><text>return val.toString();</text></outputEntry>
      </rule>
    </decisionTable>
  </decision>
  <decision id="Decision_1" name="numberToString(double d, int base)">
    <informationRequirement id="InformationRequirement_1">
      <requiredDecision href="#Decision_0" />
    </informationRequirement>
    <informationRequirement id="InformationRequirement_2">
      <requiredInput href="#InputData_1" />
    </informationRequirement>
    <informationRequirement id="InformationRequirement_3">
      <requiredInput href="#InputData_2" />
    </informationRequirement>
    <decisionTable id="DecisionTable_1">
      <input id="InputClause_1" label="toString(Object val)">
        <inputExpression id="LiteralExpression_7" typeRef="string"><text></text></inputExpression>
      </input>
      <input id="InputClause_2" label="d">
        <inputExpression id="LiteralExpression_8" typeRef="boolean"><text></text></inputExpression>
      </input>
      <input id="InputClause_3" label="base">
        <inputExpression id="LiteralExpression_9" typeRef="boolean"><text></text></inputExpression>
      </input>
      <output id="OutputClause_1" label="numberToString(double d, int base)" typeRef="string" />
      <rule id="DecisionRule_6">
        <inputEntry id="UnaryTests_6"><text>return numberToString(((Number)val).doubleValue(), 10);</text></inputEntry>
        <inputEntry id="UnaryTests_7"><text>d != d</text></inputEntry>
        <inputEntry id="UnaryTests_8"><text>-</text></inputEntry>
        <outputEntry id="LiteralExpression_10"><text>return "NaN";</text></outputEntry>
      </rule>
      <rule id="DecisionRule_7">
        <inputEntry id="UnaryTests_9"><text>return numberToString(((Number)val).doubleValue(), 10);</text></inputEntry>
        <inputEntry id="UnaryTests_10"><text>d == Double.POSITIVE_INFINITY</text></inputEntry>
        <inputEntry id="UnaryTests_11"><text>-</text></inputEntry>
        <outputEntry id="LiteralExpression_11"><text>return "Infinity";</text></outputEntry>
      </rule>
      <rule id="DecisionRule_8">
        <inputEntry id="UnaryTests_12"><text>return numberToString(((Number)val).doubleValue(), 10);</text></inputEntry>
        <inputEntry id="UnaryTests_13"><text>d == Double.NEGATIVE_INFINITY</text></inputEntry>
        <inputEntry id="UnaryTests_14"><text>-</text></inputEntry>
        <outputEntry id="LiteralExpression_12"><text>return "-Infinity";</text></outputEntry>
      </rule>
      <rule id="DecisionRule_9">
        <inputEntry id="UnaryTests_15"><text>return numberToString(((Number)val).doubleValue(), 10);</text></inputEntry>
        <inputEntry id="UnaryTests_16"><text>d == 0.0</text></inputEntry>
        <inputEntry id="UnaryTests_17"><text>-</text></inputEntry>
        <outputEntry id="LiteralExpression_13"><text>return "0";</text></outputEntry>
      </rule>
      <rule id="DecisionRule_10">
        <inputEntry id="UnaryTests_18"><text>return numberToString(((Number)val).doubleValue(), 10);</text></inputEntry>
        <inputEntry id="UnaryTests_19"><text>d == d &amp;&amp; d != Double.POSITIVE_INFINITY &amp;&amp; d != Double.NEGATIVE_INFINITY &amp;&amp; d != 0.0</text></inputEntry>
        <inputEntry id="UnaryTests_20"><text>(base &lt; 2) || (base &gt; 36)</text></inputEntry>
        <outputEntry id="LiteralExpression_14"><text>throw Context.reportRuntimeError1("msg.bad.radix", Integer.toString(base));</text></outputEntry>
      </rule>
      <rule id="DecisionRule_11">
        <inputEntry id="UnaryTests_21"><text>return numberToString(((Number)val).doubleValue(), 10);</text></inputEntry>
        <inputEntry id="UnaryTests_22"><text>d == d &amp;&amp; d != Double.POSITIVE_INFINITY &amp;&amp; d != Double.NEGATIVE_INFINITY &amp;&amp; d != 0.0</text></inputEntry>
        <inputEntry id="UnaryTests_23"><text>base != 10</text></inputEntry>
        <outputEntry id="LiteralExpression_15"><text>return DToA.JS_dtobasestr(base, d);</text></outputEntry>
      </rule>
      <rule id="DecisionRule_12">
        <inputEntry id="UnaryTests_24"><text>return numberToString(((Number)val).doubleValue(), 10);</text></inputEntry>
        <inputEntry id="UnaryTests_25"><text>d == d &amp;&amp; d != Double.POSITIVE_INFINITY &amp;&amp; d != Double.NEGATIVE_INFINITY &amp;&amp; d != 0.0</text></inputEntry>
        <inputEntry id="UnaryTests_26"><text>(base &gt;= 2 &amp;&amp; base &lt;= 36) &amp;&amp; base == 10</text></inputEntry>
        <outputEntry id="LiteralExpression_16"><text>return result.toString();</text></outputEntry>
      </rule>
    </decisionTable>
  </decision>
  <dmndi:DMNDI>
    <dmndi:DMNDiagram id="DMNDiagram_0">
      <dmndi:DMNShape id="DMNShape_0" dmnElementRef="InputData_0">
        <dc:Bounds height="45.0" width="125.0" x="150.0" y="350.0" />
      </dmndi:DMNShape>
      <dmndi:DMNShape id="DMNShape_1" dmnElementRef="InputData_1">
        <dc:Bounds height="45.0" width="125.0" x="350.0" y="350.0" />
      </dmndi:DMNShape>
      <dmndi:DMNShape id="DMNShape_2" dmnElementRef="InputData_2">
        <dc:Bounds height="45.0" width="125.0" x="550.0" y="350.0" />
      </dmndi:DMNShape>
      <dmndi:DMNShape id="DMNShape_3" dmnElementRef="Decision_0">
        <dc:Bounds height="80.0" width="180.0" x="150.0" y="220.0" />
      </dmndi:DMNShape>
      <dmndi:DMNShape id="DMNShape_4" dmnElementRef="Decision_1">
        <dc:Bounds height="80.0" width="180.0" x="350.0" y="100.0" />
      </dmndi:DMNShape>
      <dmndi:DMNEdge id="DMNEdge_0" dmnElementRef="InformationRequirement_0">
        <di:waypoint x="240.0" y="350.0" />
        <di:waypoint x="240.0" y="325.0" />
        <di:waypoint x="240.0" y="300.0" />
      </dmndi:DMNEdge>
      <dmndi:DMNEdge id="DMNEdge_1" dmnElementRef="InformationRequirement_1">
        <di:waypoint x="440.0" y="220.0" />
        <di:waypoint x="440.0" y="200.0" />
        <di:waypoint x="440.0" y="180.0" />
      </dmndi:DMNEdge>
      <dmndi:DMNEdge id="DMNEdge_2" dmnElementRef="InformationRequirement_2">
        <di:waypoint x="440.0" y="350.0" />
        <di:waypoint x="440.0" y="265.0" />
        <di:waypoint x="440.0" y="180.0" />
      </dmndi:DMNEdge>
      <dmndi:DMNEdge id="DMNEdge_3" dmnElementRef="InformationRequirement_3">
        <di:waypoint x="440.0" y="350.0" />
        <di:waypoint x="440.0" y="265.0" />
        <di:waypoint x="440.0" y="180.0" />
      </dmndi:DMNEdge>
    </dmndi:DMNDiagram>
  </dmndi:DMNDI>
</definitions>
