<?xml version="1.0" encoding="UTF-8"?>
<definitions xmlns="https://www.omg.org/spec/DMN/20191111/MODEL/" xmlns:dmndi="https://www.omg.org/spec/DMN/20191111/DMNDI/" xmlns:dc="http://www.omg.org/spec/DMN/20180521/DC/" xmlns:di="http://www.omg.org/spec/DMN/20180521/DI/" id="definitions_sj7k2p1" name="definitions" namespace="http://camunda.org/schema/1.0/dmn" exporter="dmn-js (https://demo.bpmn.io/dmn)" exporterVersion="17.2.0">
  <inputData id="InputData_val_1" name="val" />
  <inputData id="InputData_start_end_2" name="start, end" />
  <inputData id="InputData_sum_3" name="sum" />
  <inputData id="InputData_radix_4" name="radix" />
  <inputData id="InputData_nfe_5" name="nfe" />
  <inputData id="InputData_c_6" name="c" />
  <inputData id="InputData_MSJVM_BUG_WORKAROUND_7" name="MSJVM_BUG_WORKAROUND" />
  <inputData id="InputData_endchar_8" name="endchar" />
  <inputData id="InputData_c1_9" name="c1" />
  <inputData id="InputData_start_len_10" name="start, len" />
  <inputData id="InputData_startChar_11" name="startChar" />
  <inputData id="InputData_c2_12" name="c2" />
  <inputData id="InputData_ex_13" name="ex" />
  <inputData id="InputData_start_end_s_14" name="start, end, s" />
  <decision id="Decision_toNumber_Object_val_1" name="toNumber(Object val)">
    <informationRequirement id="InformationRequirement_1tov1">
      <requiredInput href="#InputData_val_1" />
    </informationRequirement>
    <decisionTable id="DecisionTable_1tov1">
      <input id="InputClause_1tov1_val" label="val">
        <inputExpression id="LiteralExpression_1tov1_val_expr" typeRef="boolean">
          <text></text>
        </inputExpression>
      </input>
      <output id="OutputClause_1tov1_output" label="toNumber(Object val)" name="" typeRef="string" />
      <rule id="DecisionRule_1tov1_rule1">
        <inputEntry id="UnaryTests_1tov1_rule1_in1">
          <text>val instanceof Number</text>
        </inputEntry>
        <outputEntry id="LiteralExpression_1tov1_rule1_out1">
          <text>return ((Number) val).doubleValue();</text>
        </outputEntry>
      </rule>
      <rule id="DecisionRule_1tov1_rule2">
        <inputEntry id="UnaryTests_1tov1_rule2_in1">
          <text>val == null</text>
        </inputEntry>
        <outputEntry id="LiteralExpression_1tov1_rule2_out1">
          <text>return +0.0;</text>
        </outputEntry>
      </rule>
      <rule id="DecisionRule_1tov1_rule3">
        <inputEntry id="UnaryTests_1tov1_rule3_in1">
          <text>val == Undefined.instance</text>
        </inputEntry>
        <outputEntry id="LiteralExpression_1tov1_rule3_out1">
          <text>return NaN;</text>
        </outputEntry>
      </rule>
      <rule id="DecisionRule_1tov1_rule4">
        <inputEntry id="UnaryTests_1tov1_rule4_in1">
          <text>val instanceof String</text>
        </inputEntry>
        <outputEntry id="LiteralExpression_1tov1_rule4_out1">
          <text>return toNumber((String) val);</text>
        </outputEntry>
      </rule>
      <rule id="DecisionRule_1tov1_rule5">
        <inputEntry id="UnaryTests_1tov1_rule5_in1">
          <text>val instanceof Boolean</text>
        </inputEntry>
        <outputEntry id="LiteralExpression_1tov1_rule5_out1">
          <text>return ((Boolean) val).booleanValue() ? 1 : +0.0;</text>
        </outputEntry>
      </rule>
      <rule id="DecisionRule_1tov1_rule6">
        <inputEntry id="UnaryTests_1tov1_rule6_in1">
          <text>val instanceof Scriptable</text>
        </inputEntry>
        <outputEntry id="LiteralExpression_1tov1_rule6_out1">
          <text>throw errorWithClassName("msg.primitive.expected", val);</text>
        </outputEntry>
      </rule>
      <rule id="DecisionRule_1tov1_rule7">
        <inputEntry id="UnaryTests_1tov1_rule7_in1">
          <text>-</text>
        </inputEntry>
        <outputEntry id="LiteralExpression_1tov1_rule7_out1">
          <text>return NaN;</text>
        </outputEntry>
      </rule>
    </decisionTable>
  </decision>
  <decision id="Decision_toNumber_String_s_2" name="toNumber(String s)">
    <informationRequirement id="InformationRequirement_2tos1">
      <requiredDecision href="#Decision_toNumber_Object_val_1" />
    </informationRequirement>
    <informationRequirement id="InformationRequirement_2tos2">
      <requiredInput href="#InputData_c_6" />
    </informationRequirement>
    <informationRequirement id="InformationRequirement_2tos3">
      <requiredInput href="#InputData_MSJVM_BUG_WORKAROUND_7" />
    </informationRequirement>
    <informationRequirement id="InformationRequirement_2tos4">
      <requiredInput href="#InputData_endchar_8" />
    </informationRequirement>
    <informationRequirement id="InformationRequirement_2tos5">
      <requiredInput href="#InputData_c1_9" />
    </informationRequirement>
    <informationRequirement id="InformationRequirement_2tos6">
      <requiredInput href="#InputData_start_len_10" />
    </informationRequirement>
    <informationRequirement id="InformationRequirement_2tos7">
      <requiredInput href="#InputData_startChar_11" />
    </informationRequirement>
    <informationRequirement id="InformationRequirement_2tos8">
      <requiredInput href="#InputData_c2_12" />
    </informationRequirement>
    <informationRequirement id="InformationRequirement_2tos9">
      <requiredInput href="#InputData_ex_13" />
    </informationRequirement>
    <informationRequirement id="InformationRequirement_2tos10">
      <requiredInput href="#InputData_start_end_s_14" />
    </informationRequirement>
    <decisionTable id="DecisionTable_2tos1">
      <input id="InputClause_2tos1_tonumobj" label="toNumber(Object val)">
        <inputExpression id="LiteralExpression_2tos1_tonumobj_expr" typeRef="string">
          <text></text>
        </inputExpression>
      </input>
      <input id="InputClause_2tos1_startlen" label="start, len">
        <inputExpression id="LiteralExpression_2tos1_startlen_expr" typeRef="boolean">
          <text></text>
        </inputExpression>
      </input>
      <input id="InputClause_2tos1_startchar" label="startChar">
        <inputExpression id="LiteralExpression_2tos1_startchar_expr" typeRef="boolean">
          <text></text>
        </inputExpression>
      </input>
      <input id="InputClause_2tos1_c1" label="c1">
        <inputExpression id="LiteralExpression_2tos1_c1_expr" typeRef="boolean">
          <text></text>
        </inputExpression>
      </input>
      <input id="InputClause_2tos1_c2" label="c2">
        <inputExpression id="LiteralExpression_2tos1_c2_expr" typeRef="boolean">
          <text></text>
        </inputExpression>
      </input>
      <input id="InputClause_2tos1_endchar" label="endchar">
        <inputExpression id="LiteralExpression_2tos1_endchar_expr" typeRef="boolean">
          <text></text>
        </inputExpression>
      </input>
      <input id="InputClause_2tos1_startends" label="start, end, s">
        <inputExpression id="LiteralExpression_2tos1_startends_expr" typeRef="boolean">
          <text></text>
        </inputExpression>
      </input>
      <input id="InputClause_2tos1_msjvm" label="MSJVM_BUG_WORKAROUND">
        <inputExpression id="LiteralExpression_2tos1_msjvm_expr" typeRef="boolean">
          <text></text>
        </inputExpression>
      </input>
      <input id="InputClause_2tos1_c" label="c">
        <inputExpression id="LiteralExpression_2tos1_c_expr" typeRef="boolean">
          <text></text>
        </inputExpression>
      </input>
      <input id="InputClause_2tos1_ex" label="ex">
        <inputExpression id="LiteralExpression_2tos1_ex_expr" typeRef="boolean">
          <text></text>
        </inputExpression>
      </input>
      <output id="OutputClause_2tos1_output" label="toNumber(String s)" name="" typeRef="string" />
      <rule id="DecisionRule_2tos1_rule1">
        <inputEntry id="UnaryTests_2tos1_rule1_in1"><text>return toNumber((String) val);</text></inputEntry>
        <inputEntry id="UnaryTests_2tos1_rule1_in2"><text>start == len</text></inputEntry>
        <inputEntry id="UnaryTests_2tos1_rule1_in3"><text>-</text></inputEntry>
        <inputEntry id="UnaryTests_2tos1_rule1_in4"><text>-</text></inputEntry>
        <inputEntry id="UnaryTests_2tos1_rule1_in5"><text>-</text></inputEntry>
        <inputEntry id="UnaryTests_2tos1_rule1_in6"><text>-</text></inputEntry>
        <inputEntry id="UnaryTests_2tos1_rule1_in7"><text>-</text></inputEntry>
        <inputEntry id="UnaryTests_2tos1_rule1_in8"><text>-</text></inputEntry>
        <inputEntry id="UnaryTests_2tos1_rule1_in9"><text>-</text></inputEntry>
        <inputEntry id="UnaryTests_2tos1_rule1_in10"><text>-</text></inputEntry>
        <outputEntry id="LiteralExpression_2tos1_rule1_out1"><text>return +0.0;</text></outputEntry>
      </rule>
      <rule id="DecisionRule_2tos1_rule2">
        <inputEntry id="UnaryTests_2tos1_rule2_in1"><text>return toNumber((String) val);</text></inputEntry>
        <inputEntry id="UnaryTests_2tos1_rule2_in2"><text>start + 2 &lt; len</text></inputEntry>
        <inputEntry id="UnaryTests_2tos1_rule2_in3"><text>startChar == '0'</text></inputEntry>
        <inputEntry id="UnaryTests_2tos1_rule2_in4"><text>c1 == 'x' || c1 == 'X'</text></inputEntry>
        <inputEntry id="UnaryTests_2tos1_rule2_in5"><text>-</text></inputEntry>
        <inputEntry id="UnaryTests_2tos1_rule2_in6"><text>-</text></inputEntry>
        <inputEntry id="UnaryTests_2tos1_rule2_in7"><text>-</text></inputEntry>
        <inputEntry id="UnaryTests_2tos1_rule2_in8"><text>-</text></inputEntry>
        <inputEntry id="UnaryTests_2tos1_rule2_in9"><text>-</text></inputEntry>
        <inputEntry id="UnaryTests_2tos1_rule2_in10"><text>-</text></inputEntry>
        <outputEntry id="LiteralExpression_2tos1_rule2_out1"><text>return stringToNumber(s, start + 2, 16);</text></outputEntry>
      </rule>
      <rule id="DecisionRule_2tos1_rule3">
        <inputEntry id="UnaryTests_2tos1_rule3_in1"><text>return toNumber((String) val);</text></inputEntry>
        <inputEntry id="UnaryTests_2tos1_rule3_in2"><text>start + 3 &lt; len &amp;&amp; s.charAt(start + 1) == '0'</text></inputEntry>
        <inputEntry id="UnaryTests_2tos1_rule3_in3"><text>startChar == '+' || startChar == '-'</text></inputEntry>
        <inputEntry id="UnaryTests_2tos1_rule3_in4"><text>-</text></inputEntry>
        <inputEntry id="UnaryTests_2tos1_rule3_in5"><text>c2 == 'x' || c2 == 'X'</text></inputEntry>
        <inputEntry id="UnaryTests_2tos1_rule3_in6"><text>-</text></inputEntry>
        <inputEntry id="UnaryTests_2tos1_rule3_in7"><text>-</text></inputEntry>
        <inputEntry id="UnaryTests_2tos1_rule3_in8"><text>-</text></inputEntry>
        <inputEntry id="UnaryTests_2tos1_rule3_in9"><text>-</text></inputEntry>
        <inputEntry id="UnaryTests_2tos1_rule3_in10"><text>-</text></inputEntry>
        <outputEntry id="LiteralExpression_2tos1_rule3_out1"><text>return startChar == '-' ? -val : val;</text></outputEntry>
      </rule>
      <rule id="DecisionRule_2tos1_rule4">
        <inputEntry id="UnaryTests_2tos1_rule4_in1"><text>return toNumber((String) val);</text></inputEntry>
        <inputEntry id="UnaryTests_2tos1_rule4_in2"><text>start != len</text></inputEntry>
        <inputEntry id="UnaryTests_2tos1_rule4_in3"><text>-</text></inputEntry>
        <inputEntry id="UnaryTests_2tos1_rule4_in4"><text>-</text></inputEntry>
        <inputEntry id="UnaryTests_2tos1_rule4_in5"><text>-</text></inputEntry>
        <inputEntry id="UnaryTests_2tos1_rule4_in6"><text>endChar == 'y'</text></inputEntry>
        <inputEntry id="UnaryTests_2tos1_rule4_in7"><text>start + 7 == end &amp;&amp; s.regionMatches(start, "Infinity", 0, 8)</text></inputEntry>
        <inputEntry id="UnaryTests_2tos1_rule4_in8"><text>-</text></inputEntry>
        <inputEntry id="UnaryTests_2tos1_rule4_in9"><text>-</text></inputEntry>
        <inputEntry id="UnaryTests_2tos1_rule4_in10"><text>-</text></inputEntry>
        <outputEntry id="LiteralExpression_2tos1_rule4_out1"><text>return startChar == '-' ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY;</text></outputEntry>
      </rule>
      <rule id="DecisionRule_2tos1_rule5">
        <inputEntry id="UnaryTests_2tos1_rule5_in1"><text>return toNumber((String) val);</text></inputEntry>
        <inputEntry id="UnaryTests_2tos1_rule5_in2"><text>start != len</text></inputEntry>
        <inputEntry id="UnaryTests_2tos1_rule5_in3"><text>-</text></inputEntry>
        <inputEntry id="UnaryTests_2tos1_rule5_in4"><text>-</text></inputEntry>
        <inputEntry id="UnaryTests_2tos1_rule5_in5"><text>-</text></inputEntry>
        <inputEntry id="UnaryTests_2tos1_rule5_in6"><text>endChar == 'y'</text></inputEntry>
        <inputEntry id="UnaryTests_2tos1_rule5_in7"><text>start + 7 != end &amp;&amp; !(s.regionMatches(start, "Infinity", 0, 8))</text></inputEntry>
        <inputEntry id="UnaryTests_2tos1_rule5_in8"><text>-</text></inputEntry>
        <inputEntry id="UnaryTests_2tos1_rule5_in9"><text>-</text></inputEntry>
        <inputEntry id="UnaryTests_2tos1_rule5_in10"><text>-</text></inputEntry>
        <outputEntry id="LiteralExpression_2tos1_rule5_out1"><text>return NaN;</text></outputEntry>
      </rule>
      <rule id="DecisionRule_2tos1_rule6">
        <inputEntry id="UnaryTests_2tos1_rule6_in1"><text>return toNumber((String) val);</text></inputEntry>
        <inputEntry id="UnaryTests_2tos1_rule6_in2"><text>start != len</text></inputEntry>
        <inputEntry id="UnaryTests_2tos1_rule6_in3"><text>-</text></inputEntry>
        <inputEntry id="UnaryTests_2tos1_rule6_in4"><text>-</text></inputEntry>
        <inputEntry id="UnaryTests_2tos1_rule6_in5"><text>-</text></inputEntry>
        <inputEntry id="UnaryTests_2tos1_rule6_in6"><text>endChar != 'y'</text></inputEntry>
        <inputEntry id="UnaryTests_2tos1_rule6_in7"><text>-</text></inputEntry>
        <inputEntry id="UnaryTests_2tos1_rule6_in8"><text>MSJVM_BUG_WORKAROUNDS</text></inputEntry>
        <inputEntry id="UnaryTests_2tos1_rule6_in9"><text>('0' &gt; c &amp;&amp; c &gt; '9') &amp;&amp; c != '.' &amp;&amp; c != 'e' &amp;&amp; c != 'E' &amp;&amp; c != '+' &amp;&amp; c != '-'</text></inputEntry>
        <inputEntry id="UnaryTests_2tos1_rule6_in10"><text>-</text></inputEntry>
        <outputEntry id="LiteralExpression_2tos1_rule6_out1"><text>return NaN;</text></outputEntry>
      </rule>
      <rule id="DecisionRule_2tos1_rule7">
        <inputEntry id="UnaryTests_2tos1_rule7_in1"><text>return toNumber((String) val);</text></inputEntry>
        <inputEntry id="UnaryTests_2tos1_rule7_in2"><text>start != len</text></inputEntry>
        <inputEntry id="UnaryTests_2tos1_rule7_in3"><text>-</text></inputEntry>
        <inputEntry id="UnaryTests_2tos1_rule7_in4"><text>-</text></inputEntry>
        <inputEntry id="UnaryTests_2tos1_rule7_in5"><text>-</text></inputEntry>
        <inputEntry id="UnaryTests_2tos1_rule7_in6"><text>endChar != 'y'</text></inputEntry>
        <inputEntry id="UnaryTests_2tos1_rule7_in7"><text>-</text></inputEntry>
        <inputEntry id="UnaryTests_2tos1_rule7_in8"><text>-</text></inputEntry>
        <inputEntry id="UnaryTests_2tos1_rule7_in9"><text>-</text></inputEntry>
        <inputEntry id="UnaryTests_2tos1_rule7_in10"><text>!(NumberFormatException ex)</text></inputEntry>
        <outputEntry id="LiteralExpression_2tos1_rule7_out1"><text>return Double.valueOf(sub).doubleValue();</text></outputEntry>
      </rule>
      <rule id="DecisionRule_2tos1_rule8">
        <inputEntry id="UnaryTests_2tos1_rule8_in1"><text>return toNumber((String) val);</text></inputEntry>
        <inputEntry id="UnaryTests_2tos1_rule8_in2"><text>start != len</text></inputEntry>
        <inputEntry id="UnaryTests_2tos1_rule8_in3"><text>-</text></inputEntry>
        <inputEntry id="UnaryTests_2tos1_rule8_in4"><text>-</text></inputEntry>
        <inputEntry id="UnaryTests_2tos1_rule8_in5"><text>-</text></inputEntry>
        <inputEntry id="UnaryTests_2tos1_rule8_in6"><text>endChar != 'y'</text></inputEntry>
        <inputEntry id="UnaryTests_2tos1_rule8_in7"><text>-</text></inputEntry>
        <inputEntry id="UnaryTests_2tos1_rule8_in8"><text>-</text></inputEntry>
        <inputEntry id="UnaryTests_2tos1_rule8_in9"><text>-</text></inputEntry>
        <inputEntry id="UnaryTests_2tos1_rule8_in10"><text>NumberFormatException ex</text></inputEntry>
        <outputEntry id="LiteralExpression_2tos1_rule8_out1"><text>return NaN;</text></outputEntry>
      </rule>
    </decisionTable>
  </decision>
  <decision id="Decision_stringToNumber_3" name="stringToNumber(String s, int start, int radix)">
    <informationRequirement id="InformationRequirement_3stn1">
      <requiredDecision href="#Decision_toNumber_String_s_2" />
    </informationRequirement>
    <informationRequirement id="InformationRequirement_3stn2">
      <requiredInput href="#InputData_start_end_2" />
    </informationRequirement>
    <informationRequirement id="InformationRequirement_3stn3">
      <requiredInput href="#InputData_sum_3" />
    </informationRequirement>
    <informationRequirement id="InformationRequirement_3stn4">
      <requiredInput href="#InputData_radix_4" />
    </informationRequirement>
    <informationRequirement id="InformationRequirement_3stn5">
      <requiredInput href="#InputData_nfe_5" />
    </informationRequirement>
    <decisionTable id="DecisionTable_3stn1">
      <input id="InputClause_3stn1_tonums" label="toNumber(String s)">
        <inputExpression id="LiteralExpression_3stn1_tonums_expr" typeRef="string">
          <text></text>
        </inputExpression>
      </input>
      <input id="InputClause_3stn1_startend" label="start, end">
        <inputExpression id="LiteralExpression_3stn1_startend_expr" typeRef="boolean">
          <text></text>
        </inputExpression>
      </input>
      <input id="InputClause_3stn1_sum" label="sum">
        <inputExpression id="LiteralExpression_3stn1_sum_expr" typeRef="boolean">
          <text></text>
        </inputExpression>
      </input>
      <input id="InputClause_3stn1_radix" label="radix">
        <inputExpression id="LiteralExpression_3stn1_radix_expr" typeRef="boolean">
          <text></text>
        </inputExpression>
      </input>
      <input id="InputClause_3stn1_nfe" label="nfe">
        <inputExpression id="LiteralExpression_3stn1_nfe_expr" typeRef="boolean">
          <text></text>
        </inputExpression>
      </input>
      <output id="OutputClause_3stn1_output" label="stringToNumber(String s, int start, int radix)" name="" typeRef="string" />
      <rule id="DecisionRule_3stn1_rule1">
        <inputEntry id="UnaryTests_3stn1_rule1_in1"><text>(return startChar == '-' ? -val : val;) || (return stringToNumber(s, start + 2, 16);)</text></inputEntry>
        <inputEntry id="UnaryTests_3stn1_rule1_in2"><text>start == end</text></inputEntry>
        <inputEntry id="UnaryTests_3stn1_rule1_in3"><text>-</text></inputEntry>
        <inputEntry id="UnaryTests_3stn1_rule1_in4"><text>-</text></inputEntry>
        <inputEntry id="UnaryTests_3stn1_rule1_in5"><text>-</text></inputEntry>
        <outputEntry id="LiteralExpression_3stn1_rule1_out1"><text>return NaN;</text></outputEntry>
      </rule>
      <rule id="DecisionRule_3stn1_rule2">
        <inputEntry id="UnaryTests_3stn1_rule2_in1"><text>(return startChar == '-' ? -val : val;) || (return stringToNumber(s, start + 2, 16);)</text></inputEntry>
        <inputEntry id="UnaryTests_3stn1_rule2_in2"><text>start != end</text></inputEntry>
        <inputEntry id="UnaryTests_3stn1_rule2_in3"><text>sum &gt;= 9007199254740992.0</text></inputEntry>
        <inputEntry id="UnaryTests_3stn1_rule2_in4"><text>radix == 10</text></inputEntry>
        <inputEntry id="UnaryTests_3stn1_rule2_in5"><text>!(NumberFormatException nfe)</text></inputEntry>
        <outputEntry id="LiteralExpression_3stn1_rule2_out1"><text>return Double.valueOf(s.substring(start, end)).doubleValue();</text></outputEntry>
      </rule>
      <rule id="DecisionRule_3stn1_rule3">
        <inputEntry id="UnaryTests_3stn1_rule3_in1"><text>(return startChar == '-' ? -val : val;) || (return stringToNumber(s, start + 2, 16);)</text></inputEntry>
        <inputEntry id="UnaryTests_3stn1_rule3_in2"><text>start != end</text></inputEntry>
        <inputEntry id="UnaryTests_3stn1_rule3_in3"><text>sum &gt;= 9007199254740992.0</text></inputEntry>
        <inputEntry id="UnaryTests_3stn1_rule3_in4"><text>radix == 10</text></inputEntry>
        <inputEntry id="UnaryTests_3stn1_rule3_in5"><text>NumberFormatException nfe</text></inputEntry>
        <outputEntry id="LiteralExpression_3stn1_rule3_out1"><text>return NaN;</text></outputEntry>
      </rule>
      <rule id="DecisionRule_3stn1_rule4">
        <inputEntry id="UnaryTests_3stn1_rule4_in1"><text>(return startChar == '-' ? -val : val;) || (return stringToNumber(s, start + 2, 16);)</text></inputEntry>
        <inputEntry id="UnaryTests_3stn1_rule4_in2"><text>start != end</text></inputEntry>
        <inputEntry id="UnaryTests_3stn1_rule4_in3"><text>-</text></inputEntry>
        <inputEntry id="UnaryTests_3stn1_rule4_in4"><text>-</text></inputEntry>
        <inputEntry id="UnaryTests_3stn1_rule4_in5"><text>-</text></inputEntry>
        <outputEntry id="LiteralExpression_3stn1_rule4_out1"><text>return NaN;</text></outputEntry>
      </rule>
    </decisionTable>
  </decision>
  <dmndi:DMNDI>
    <dmndi:DMNDiagram id="DMNDiagram_1">
      <dmndi:DMNShape id="DMNShape_InputData_val_1" dmnElementRef="InputData_val_1">
        <dc:Bounds height="45" width="125" x="50" y="500" />
      </dmndi:DMNShape>
      <dmndi:DMNShape id="DMNShape_InputData_start_end_2" dmnElementRef="InputData_start_end_2">
        <dc:Bounds height="45" width="125" x="200" y="500" />
      </dmndi:DMNShape>
      <dmndi:DMNShape id="DMNShape_InputData_sum_3" dmnElementRef="InputData_sum_3">
        <dc:Bounds height="45" width="125" x="350" y="500" />
      </dmndi:DMNShape>
      <dmndi:DMNShape id="DMNShape_InputData_radix_4" dmnElementRef="InputData_radix_4">
        <dc:Bounds height="45" width="125" x="500" y="500" />
      </dmndi:DMNShape>
      <dmndi:DMNShape id="DMNShape_InputData_nfe_5" dmnElementRef="InputData_nfe_5">
        <dc:Bounds height="45" width="125" x="650" y="500" />
      </dmndi:DMNShape>
      <dmndi:DMNShape id="DMNShape_InputData_c_6" dmnElementRef="InputData_c_6">
        <dc:Bounds height="45" width="125" x="50" y="560" />
      </dmndi:DMNShape>
      <dmndi:DMNShape id="DMNShape_InputData_MSJVM_BUG_WORKAROUND_7" dmnElementRef="InputData_MSJVM_BUG_WORKAROUND_7">
        <dc:Bounds height="45" width="125" x="200" y="560" />
      </dmndi:DMNShape>
      <dmndi:DMNShape id="DMNShape_InputData_endchar_8" dmnElementRef="InputData_endchar_8">
        <dc:Bounds height="45" width="125" x="350" y="560" />
      </dmndi:DMNShape>
      <dmndi:DMNShape id="DMNShape_InputData_c1_9" dmnElementRef="InputData_c1_9">
        <dc:Bounds height="45" width="125" x="500" y="560" />
      </dmndi:DMNShape>
      <dmndi:DMNShape id="DMNShape_InputData_start_len_10" dmnElementRef="InputData_start_len_10">
        <dc:Bounds height="45" width="125" x="650" y="560" />
      </dmndi:DMNShape>
      <dmndi:DMNShape id="DMNShape_InputData_startChar_11" dmnElementRef="InputData_startChar_11">
        <dc:Bounds height="45" width="125" x="50" y="620" />
      </dmndi:DMNShape>
      <dmndi:DMNShape id="DMNShape_InputData_c2_12" dmnElementRef="InputData_c2_12">
        <dc:Bounds height="45" width="125" x="200" y="620" />
      </dmndi:DMNShape>
      <dmndi:DMNShape id="DMNShape_InputData_ex_13" dmnElementRef="InputData_ex_13">
        <dc:Bounds height="45" width="125" x="350" y="620" />
      </dmndi:DMNShape>
      <dmndi:DMNShape id="DMNShape_InputData_start_end_s_14" dmnElementRef="InputData_start_end_s_14">
        <dc:Bounds height="45" width="125" x="500" y="620" />
      </dmndi:DMNShape>
      <dmndi:DMNShape id="DMNShape_Decision_toNumber_Object_val_1" dmnElementRef="Decision_toNumber_Object_val_1">
        <dc:Bounds height="80" width="180" x="260" y="350" />
      </dmndi:DMNShape>
      <dmndi:DMNShape id="DMNShape_Decision_toNumber_String_s_2" dmnElementRef="Decision_toNumber_String_s_2">
        <dc:Bounds height="80" width="180" x="260" y="200" />
      </dmndi:DMNShape>
      <dmndi:DMNShape id="DMNShape_Decision_stringToNumber_3" dmnElementRef="Decision_stringToNumber_3">
        <dc:Bounds height="80" width="180" x="260" y="50" />
      </dmndi:DMNShape>
      <dmndi:DMNEdge id="DMNEdge_1tov1_edge" dmnElementRef="InformationRequirement_1tov1">
        <di:waypoint x="112" y="500" />
        <di:waypoint x="350" y="430" />
      </dmndi:DMNEdge>
      <dmndi:DMNEdge id="DMNEdge_2tos1_edge" dmnElementRef="InformationRequirement_2tos1">
        <di:waypoint x="350" y="350" />
        <di:waypoint x="350" y="280" />
      </dmndi:DMNEdge>
      <dmndi:DMNEdge id="DMNEdge_2tos2_edge" dmnElementRef="InformationRequirement_2tos2">
        <di:waypoint x="112" y="560" />
        <di:waypoint x="270" y="280" />
      </dmndi:DMNEdge>
      <dmndi:DMNEdge id="DMNEdge_2tos3_edge" dmnElementRef="InformationRequirement_2tos3">
        <di:waypoint x="262" y="560" />
        <di:waypoint x="280" y="280" />
      </dmndi:DMNEdge>
      <dmndi:DMNEdge id="DMNEdge_2tos4_edge" dmnElementRef="InformationRequirement_2tos4">
        <di:waypoint x="412" y="560" />
        <di:waypoint x="290" y="280" />
      </dmndi:DMNEdge>
      <dmndi:DMNEdge id="DMNEdge_2tos5_edge" dmnElementRef="InformationRequirement_2tos5">
        <di:waypoint x="562" y="560" />
        <di:waypoint x="300" y="280" />
      </dmndi:DMNEdge>
      <dmndi:DMNEdge id="DMNEdge_2tos6_edge" dmnElementRef="InformationRequirement_2tos6">
        <di:waypoint x="712" y="560" />
        <di:waypoint x="310" y="280" />
      </dmndi:DMNEdge>
      <dmndi:DMNEdge id="DMNEdge_2tos7_edge" dmnElementRef="InformationRequirement_2tos7">
        <di:waypoint x="112" y="620" />
        <di:waypoint x="320" y="280" />
      </dmndi:DMNEdge>
      <dmndi:DMNEdge id="DMNEdge_2tos8_edge" dmnElementRef="InformationRequirement_2tos8">
        <di:waypoint x="262" y="620" />
        <di:waypoint x="330" y="280" />
      </dmndi:DMNEdge>
      <dmndi:DMNEdge id="DMNEdge_2tos9_edge" dmnElementRef="InformationRequirement_2tos9">
        <di:waypoint x="412" y="620" />
        <di:waypoint x="340" y="280" />
      </dmndi:DMNEdge>
      <dmndi:DMNEdge id="DMNEdge_2tos10_edge" dmnElementRef="InformationRequirement_2tos10">
        <di:waypoint x="562" y="620" />
        <di:waypoint x="350" y="280" />
      </dmndi:DMNEdge>
      <dmndi:DMNEdge id="DMNEdge_3stn1_edge" dmnElementRef="InformationRequirement_3stn1">
        <di:waypoint x="350" y="200" />
        <di:waypoint x="350" y="130" />
      </dmndi:DMNEdge>
      <dmndi:DMNEdge id="DMNEdge_3stn2_edge" dmnElementRef="InformationRequirement_3stn2">
        <di:waypoint x="262" y="500" />
        <di:waypoint x="320" y="130" />
      </dmndi:DMNEdge>
      <dmndi:DMNEdge id="DMNEdge_3stn3_edge" dmnElementRef="InformationRequirement_3stn3">
        <di:waypoint x="412" y="500" />
        <di:waypoint x="330" y="130" />
      </dmndi:DMNEdge>
      <dmndi:DMNEdge id="DMNEdge_3stn4_edge" dmnElementRef="InformationRequirement_3stn4">
        <di:waypoint x="562" y="500" />
        <di:waypoint x="340" y="130" />
      </dmndi:DMNEdge>
      <dmndi:DMNEdge id="DMNEdge_3stn5_edge" dmnElementRef="InformationRequirement_3stn5">
        <di:waypoint x="712" y="500" />
        <di:waypoint x="350" y="130" />
      </dmndi:DMNEdge>
    </dmndi:DMNDiagram>
  </dmndi:DMNDI>
</definitions>
