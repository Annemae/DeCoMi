<?xml version="1.0" encoding="UTF-8"?>
<definitions xmlns="https://www.omg.org/spec/DMN/20191111/MODEL/" xmlns:dmndi="https://www.omg.org/spec/DMN/20191111/DMNDI/" xmlns:dc="http://www.omg.org/spec/DMN/20180521/DC/" xmlns:di="http://www.omg.org/spec/DMN/20180521/DI/" id="definitions_toStringNumber" name="definitions" namespace="http://camunda.org/schema/1.0/dmn" exporter="dmn-js (https://demo.bpmn.io/dmn)" exporterVersion="17.2.0">
  <inputData id="InputData_val" name="val" />
  <inputData id="InputData_d" name="d" />
  <inputData id="InputData_base" name="base" />
  <decision id="Decision_toString" name="toString(Object val)">
    <informationRequirement id="IR_toString_val">
      <requiredInput href="#InputData_val" />
    </informationRequirement>
    <decisionTable id="DT_toString">
      <input id="InputClause_toString_val" label="val">
        <inputExpression id="IE_toString_val" typeRef="number">
          <text></text>
        </inputExpression>
      </input>
      <output id="OutputClause_toString" label="toString(Object val)" typeRef="string" />
      <rule id="Rule_toString_1">
        <inputEntry id="UnaryTests_toString_r1_val">
          <text>val == null</text>
        </inputEntry>
        <outputEntry id="LiteralExpr_toString_r1">
          <text>return "null";</text>
        </outputEntry>
      </rule>
      <rule id="Rule_toString_2">
        <inputEntry id="UnaryTests_toString_r2_val">
          <text>val == Undefined.instance</text>
        </inputEntry>
        <outputEntry id="LiteralExpr_toString_r2">
          <text>return "undefined";</text>
        </outputEntry>
      </rule>
      <rule id="Rule_toString_3">
        <inputEntry id="UnaryTests_toString_r3_val">
          <text>val instanceof String</text>
        </inputEntry>
        <outputEntry id="LiteralExpr_toString_r3">
          <text>return (String)val;</text>
        </outputEntry>
      </rule>
      <rule id="Rule_toString_4">
        <inputEntry id="UnaryTests_toString_r4_val">
          <text>val instanceof Number</text>
        </inputEntry>
        <outputEntry id="LiteralExpr_toString_r4">
          <text>return numberToString(((Number)val).doubleValue(), 10);</text>
        </outputEntry>
      </rule>
      <rule id="Rule_toString_5">
        <inputEntry id="UnaryTests_toString_r5_val">
          <text>val instanceof Scriptable</text>
        </inputEntry>
        <outputEntry id="LiteralExpr_toString_r5">
          <text>throw errorWithClassName("msg.primitive.expected", val);</text>
        </outputEntry>
      </rule>
      <rule id="Rule_toString_6">
        <inputEntry id="UnaryTests_toString_r6_val">
          <text>-</text>
        </inputEntry>
        <outputEntry id="LiteralExpr_toString_r6">
          <text>return val.toString();</text>
        </outputEntry>
      </rule>
    </decisionTable>
  </decision>
  <decision id="Decision_numToString" name="numberToString(double d, int base)">
    <informationRequirement id="IR_numToString_decision_toString">
      <requiredDecision href="#Decision_toString" />
    </informationRequirement>
    <informationRequirement id="IR_numToString_input_d">
      <requiredInput href="#InputData_d" />
    </informationRequirement>
    <informationRequirement id="IR_numToString_input_base">
      <requiredInput href="#InputData_base" />
    </informationRequirement>
    <decisionTable id="DT_numToString">
      <input id="InputClause_numToString_ts" label="toString(Object val)">
        <inputExpression id="IE_numToString_ts" typeRef="string">
          <text></text>
        </inputExpression>
      </input>
      <input id="InputClause_numToString_d" label="d">
        <inputExpression id="IE_numToString_d" typeRef="boolean">
          <text></text>
        </inputExpression>
      </input>
      <input id="InputClause_numToString_base" label="base">
        <inputExpression id="IE_numToString_base" typeRef="boolean">
          <text></text>
        </inputExpression>
      </input>
      <output id="OutputClause_numToString" label="numberToString(double d, int base)" typeRef="string" />
      <rule id="Rule_numToString_1">
        <inputEntry id="UnaryTests_numToString_r1_ts">
          <text>return numberToString(((Number)val).doubleValue(), 10);</text>
        </inputEntry>
        <inputEntry id="UnaryTests_numToString_r1_d">
          <text>d != d</text>
        </inputEntry>
        <inputEntry id="UnaryTests_numToString_r1_base">
          <text>-</text>
        </inputEntry>
        <outputEntry id="LiteralExpr_numToString_r1">
          <text>return "NaN";</text>
        </outputEntry>
      </rule>
      <rule id="Rule_numToString_2">
        <inputEntry id="UnaryTests_numToString_r2_ts">
          <text>return numberToString(((Number)val).doubleValue(), 10);</text>
        </inputEntry>
        <inputEntry id="UnaryTests_numToString_r2_d">
          <text>d == Double.POSITIVE_INFINITY</text>
        </inputEntry>
        <inputEntry id="UnaryTests_numToString_r2_base">
          <text>-</text>
        </inputEntry>
        <outputEntry id="LiteralExpr_numToString_r2">
          <text>return "Infinity";</text>
        </outputEntry>
      </rule>
      <rule id="Rule_numToString_3">
        <inputEntry id="UnaryTests_numToString_r3_ts">
          <text>return numberToString(((Number)val).doubleValue(), 10);</text>
        </inputEntry>
        <inputEntry id="UnaryTests_numToString_r3_d">
          <text>d == Double.NEGATIVE_INFINITY</text>
        </inputEntry>
        <inputEntry id="UnaryTests_numToString_r3_base">
          <text>-</text>
        </inputEntry>
        <outputEntry id="LiteralExpr_numToString_r3">
          <text>return "-Infinity";</text>
        </outputEntry>
      </rule>
      <rule id="Rule_numToString_4">
        <inputEntry id="UnaryTests_numToString_r4_ts">
          <text>return numberToString(((Number)val).doubleValue(), 10);</text>
        </inputEntry>
        <inputEntry id="UnaryTests_numToString_r4_d">
          <text>d == 0.0</text>
        </inputEntry>
        <inputEntry id="UnaryTests_numToString_r4_base">
          <text>-</text>
        </inputEntry>
        <outputEntry id="LiteralExpr_numToString_r4">
          <text>return "0";</text>
        </outputEntry>
      </rule>
      <rule id="Rule_numToString_5">
        <inputEntry id="UnaryTests_numToString_r5_ts">
          <text>return numberToString(((Number)val).doubleValue(), 10);</text>
        </inputEntry>
        <inputEntry id="UnaryTests_numToString_r5_d">
          <text>d == d &amp;&amp; d != Double.POSITIVE_INFINITY &amp;&amp; d != Double.NEGATIVE_INFINITY &amp;&amp; d != 0.0</text>
        </inputEntry>
        <inputEntry id="UnaryTests_numToString_r5_base">
          <text>(base &lt; 2) || (base &gt; 36)</text>
        </inputEntry>
        <outputEntry id="LiteralExpr_numToString_r5">
          <text>throw Context.reportRuntimeError1("msg.bad.radix", Integer.toString(base));</text>
        </outputEntry>
      </rule>
      <rule id="Rule_numToString_6">
        <inputEntry id="UnaryTests_numToString_r6_ts">
          <text>return numberToString(((Number)val).doubleValue(), 10);</text>
        </inputEntry>
        <inputEntry id="UnaryTests_numToString_r6_d">
          <text>d == d &amp;&amp; d != Double.POSITIVE_INFINITY &amp;&amp; d != Double.NEGATIVE_INFINITY &amp;&amp; d != 0.0</text>
        </inputEntry>
        <inputEntry id="UnaryTests_numToString_r6_base">
          <text>base != 10</text>
        </inputEntry>
        <outputEntry id="LiteralExpr_numToString_r6">
          <text>return DToA.JS_dtobasestr(base, d);</text>
        </outputEntry>
      </rule>
      <rule id="Rule_numToString_7">
        <inputEntry id="UnaryTests_numToString_r7_ts">
          <text>return numberToString(((Number)val).doubleValue(), 10);</text>
        </inputEntry>
        <inputEntry id="UnaryTests_numToString_r7_d">
          <text>d == d &amp;&amp; d != Double.POSITIVE_INFINITY &amp;&amp; d != Double.NEGATIVE_INFINITY &amp;&amp; d != 0.0</text>
        </inputEntry>
        <inputEntry id="UnaryTests_numToString_r7_base">
          <text>(base &gt;= 2 &amp;&amp; base &lt;= 36) &amp;&amp; base == 10</text>
        </inputEntry>
        <outputEntry id="LiteralExpr_numToString_r7">
          <text>return result.toString();</text>
        </outputEntry>
      </rule>
    </decisionTable>
  </decision>
  <dmndi:DMNDI>
    <dmndi:DMNDiagram id="DMNDiagram_1">
      <dmndi:DMNShape id="DMNShape_InputData_val" dmnElementRef="InputData_val">
        <dc:Bounds height="45" width="125" x="88" y="400" />
      </dmndi:DMNShape>
      <dmndi:DMNShape id="DMNShape_InputData_d" dmnElementRef="InputData_d">
        <dc:Bounds height="45" width="125" x="288" y="400" />
      </dmndi:DMNShape>
      <dmndi:DMNShape id="DMNShape_InputData_base" dmnElementRef="InputData_base">
        <dc:Bounds height="45" width="125" x="488" y="400" />
      </dmndi:DMNShape>
      <dmndi:DMNShape id="DMNShape_Decision_toString" dmnElementRef="Decision_toString">
        <dc:Bounds height="80" width="180" x="60" y="250" />
      </dmndi:DMNShape>
      <dmndi:DMNEdge id="DMNEdge_IR_toString_val" dmnElementRef="IR_toString_val">
        <di:waypoint x="150" y="400" />
        <di:waypoint x="150" y="350" />
        <di:waypoint x="150" y="330" />
      </dmndi:DMNEdge>
      <dmndi:DMNShape id="DMNShape_Decision_numToString" dmnElementRef="Decision_numToString">
        <dc:Bounds height="80" width="180" x="270" y="100" />
      </dmndi:DMNShape>
      <dmndi:DMNEdge id="DMNEdge_IR_numToString_decision_toString" dmnElementRef="IR_numToString_decision_toString">
        <di:waypoint x="150" y="250" />
        <di:waypoint x="150" y="200" />
        <di:waypoint x="300" y="200" />
        <di:waypoint x="360" y="180" />
      </dmndi:DMNEdge>
      <dmndi:DMNEdge id="DMNEdge_IR_numToString_input_d" dmnElementRef="IR_numToString_input_d">
        <di:waypoint x="350" y="400" />
        <di:waypoint x="350" y="200" />
        <di:waypoint x="360" y="180" />
      </dmndi:DMNEdge>
      <dmndi:DMNEdge id="DMNEdge_IR_numToString_input_base" dmnElementRef="IR_numToString_input_base">
        <di:waypoint x="550" y="400" />
        <di:waypoint x="550" y="200" />
        <di:waypoint x="420" y="200" />
        <di:waypoint x="360" y="180" />
      </dmndi:DMNEdge>
    </dmndi:DMNDiagram>
  </dmndi:DMNDI>
</definitions>
